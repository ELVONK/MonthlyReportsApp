# Enhanced app.py with clean chart rendering and error-free structure and PowerPoint export

import streamlit as st
import pandas as pd
import altair as alt
from zipfile import ZipFile
from openpyxl import load_workbook
from openpyxl.utils import get_column_letter
from pptx import Presentation
from pptx.util import Inches
import io

st.set_page_config(page_title="Monthly Report Dashboard", layout="wide")

st.markdown("""
    <h1 style='text-align: center; color: #1f77b4;'>üìä Departmental Reports Dashboard</h1>
""", unsafe_allow_html=True)

uploaded_file = st.file_uploader("Upload the Excel report", type=[".xlsx"])

def generate_ppt(df, sheet_name):
    prs = Presentation()
    title_slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(title_slide_layout)
    slide.shapes.title.text = f"Report: {sheet_name}"
    slide.placeholders[1].text = "Generated by Monthly Report Dashboard"

    slide = prs.slides.add_slide(prs.slide_layouts[5])
    shapes = slide.shapes
    title_shape = shapes.title
    title_shape.text = "Data Table Preview"

    rows, cols = df.shape
    table = shapes.add_table(rows + 1, cols, Inches(0.5), Inches(1.5), Inches(9), Inches(0.8 + rows * 0.25)).table

    for i, col in enumerate(df.columns):
        table.cell(0, i).text = str(col)

    for r in range(rows):
        for c in range(cols):
            table.cell(r + 1, c).text = str(df.iloc[r, c])

    output = io.BytesIO()
    prs.save(output)
    output.seek(0)
    return output

if uploaded_file:
    try:
        excel_file = pd.ExcelFile(uploaded_file)
        sheet_names = excel_file.sheet_names

        st.markdown("### üóÇ Select a Sheet to View")
        selected_sheet = st.selectbox("Choose a sheet", sheet_names)

        wb = load_workbook(uploaded_file, data_only=True)
        ws = wb[selected_sheet]

        header_row = next(ws.iter_rows(min_row=1, max_row=1))
        visible_col_info = [(get_column_letter(cell.column), cell.value) for cell in header_row if cell.value is not None and not ws.column_dimensions[get_column_letter(cell.column)].hidden]
        visible_letters = [col[0] for col in visible_col_info]
        visible_headers = [col[1] for col in visible_col_info]

        visible_data = []
        possible_footnotes = []
        for row in ws.iter_rows(min_row=2):
            if not ws.row_dimensions[row[0].row].hidden:
                row_data = [cell.value for cell in row if get_column_letter(cell.column) in visible_letters]
                if any(cell is not None and cell != "" for cell in row_data):
                    visible_data.append(row_data)
                else:
                    row_text = " ".join([str(cell.value) for cell in row if cell.value])
                    if "footnote" in row_text.lower():
                        possible_footnotes.append(row_text.strip())

        df = pd.DataFrame(visible_data, columns=visible_headers)

        if 'Department' in df.columns:
            departments = df['Department'].dropna().unique().tolist()
            selected_dept = st.selectbox(f"Filter by Department in '{selected_sheet}'", departments)
            df = df[df['Department'] == selected_dept]

        st.dataframe(df, use_container_width=True)

        csv = df.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="‚¨áÔ∏è Download Table as CSV",
            data=csv,
            file_name=f"{selected_sheet}_filtered_data.csv",
            mime="text/csv"
        )

        pptx_file = generate_ppt(df, selected_sheet)
        st.download_button(
            label="‚¨áÔ∏è Download as PowerPoint",
            data=pptx_file,
            file_name=f"{selected_sheet}_report.pptx",
            mime="application/vnd.openxmlformats-officedocument.presentationml.presentation"
        )

        # chart and other logic continues below

    except Exception as e:
        st.error(f"‚ùå Failed to read Excel file: {e}")
else:
    st.warning("Please upload a valid Excel report to continue.")
